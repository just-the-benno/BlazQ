@using BlazQ.Shared.Responses
@using BlazQ.Shared.Requets
@using BlazQ.Shared
@using Microsoft.AspNetCore.SignalR.Client 

@page "/Lobby"
@inject NavigationManager navManager

@inject GameSessionState state
@inject HttpClient client

@implements IAsyncDisposable

@if (state.Session != null)
{
    <Header>
        <h1>Welcome to your Lobby <br>
        </h1>
    </Header>

    <ContentPage>
        <Card>
            <Header>
                All Players
            </Header>
            <Body>
                <ul>
                    @foreach (var item in _activePlayers)
                    {
                        <li @onclick="@( () => JoinLobby(item.Id))" >@item.Name</li>
                    }
                </ul>
            </Body>
        </Card>
         <Card>
            <Header>
                My Lobby
            </Header>
            <Body>
              @foreach (var item in _membersInLobby)
                    {
                        <li>@item.Name</li>
                    }
            </Body>
        </Card>
    </ContentPage>

    <Footer ShowPointsPanel="false" Players="_session.Players"></Footer>
}

@code {
    private GameSession _session;
private List<ServerSidePlayerOverview> _activePlayers = new();
private List<ServerSidePlayerOverview> _membersInLobby = new();

    private Guid _playerId;
private HubConnection _hubConnection;
    protected override void OnInitialized()
    {
        if (state.Session == null)
        {
            navManager.NavigateTo("/");
            return;
        }
        else
        {
            _session = state.Session;
        }

        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
            await base.OnInitializedAsync();

            var repsonseMessage = await client.PostAsJsonAsync("api/Lobby/Player",new AddPlayerRequest
            {
                Name = _session.FirstPlayer.Name,
                AvatarUrl = _session.FirstPlayer.AvatarUrl,
            });

            if(repsonseMessage.IsSuccessStatusCode == true)
            {
                AddPlayerResponse response = 
                    await  repsonseMessage.Content.ReadFromJsonAsync<AddPlayerResponse>();

                 _playerId = response.PlayerId;

                GetAllPlayersResponse playerResponse = 
                await client.GetFromJsonAsync<GetAllPlayersResponse>("api/Lobby/Players/");

                    _activePlayers = playerResponse.Players;

                _hubConnection = new HubConnectionBuilder()
                    .WithUrl(navManager.ToAbsoluteUri("/lobby"))
                    .Build();

                _hubConnection.On<ServerSidePlayerOverview>(nameof(ILobbyClient.NewPlayer),NewPlayer);
                _hubConnection.On<ServerSidePlayerOverview>(nameof(ILobbyClient.NewPlayerInLobby),NewPlayerInLobby);

                await _hubConnection.StartAsync();

                await _hubConnection.SendAsync("JoinLobby",response.LobbyId);
            }
    }

    private void NewPlayer(ServerSidePlayerOverview player)
    {
        _activePlayers.Add(player);
        StateHasChanged();
    }

        private void NewPlayerInLobby(ServerSidePlayerOverview player)
    {
        _membersInLobby.Add(player);
        StateHasChanged();
    }

    private async Task JoinLobby(Guid hostId)
    {
        var responseMessage = await client.PostAsJsonAsync("api/Lobby/Join", new JoinLobbyRequest
        {
 HostId = hostId,
 JoineeId = _playerId,
        });

        if(responseMessage.IsSuccessStatusCode == true)
        {
            JoinLobbyResponse response = 
            await responseMessage.Content.ReadFromJsonAsync<JoinLobbyResponse>();

            _membersInLobby = response.Members;

            await _hubConnection.SendAsync("JoinLobby",response.LobbyId);
        }
    }

    public async ValueTask DisposeAsync()
    {
        await _hubConnection.DisposeAsync();
    }
}
@page "/Game"
@inject NavigationManager navManager

@inject GameSessionState state


@if (state.Session != null)
{
    <div class="full-heigth" tabindex="0" @onkeyup="KeyPressed">

        <Header>
            <ChildContent>
                <h1>
                    Question @(_session.QuestionIndex+1): <br>
                    <small> @_session.GetCurrentQuestion().Text</small>
                </h1>
            </ChildContent>
            <AdditionalContent>
                <div class="d-flex flex-fill justify-content-end flex-column align-items-center">
                    <Countdown @ref="_countdown" CountdownFinished="CountdownFinished" />
                </div>
            </AdditionalContent>

        </Header>
        <ContentPage>
            @{
                Int32 optionIndex = 0;
            }
            <div class="answer-toolbar ">


                @foreach (String option in _session.GetCurrentQuestion().Options)
                {
                    Int32 temp = optionIndex;

                    <button type="button" class="btn @SetButtonBackground(temp)" @onclick="() => OptionSelected(temp)">
                        <strong>@(optionIndex  + 1) </strong>
                        <span>    @option</span>
                    </button>


                    optionIndex++;
                }

            </div>


        </ContentPage>

        <Footer Players="_session.Players"
                ActivePlayerIndex="_activePlayerIndex"
                TotalReliableWisdomJokerRequested="TotalReliableWisdomJokerRequested"
                NailJokerRequested="NailJokerRequested">
            @if (_showAnswers == true)
            {
                <button type="button" class="btn btn-turquois" @onclick="MoveToNextQuestion">
                    Next Question
                </button>
            }

        </Footer>
    </div>
}


@code
{
    private Countdown _countdown;

    private GameSession _session;
    private AnswerViewModel _currentAnswer = new AnswerViewModel();
    protected override void OnInitialized()
    {
        if (state.Session == null)
        {
            navManager.NavigateTo("/");
            return;
        }
        else
        {
            _session = state.Session;
        }

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender == true)
        {
            await _countdown.Start(30);
        }
    }

    private Boolean _showAnswers = false;

    private String SetButtonBackground(Int32 option)
    {
        if (_showAnswers == true)
        {
            if (option == _session.GetCurrentQuestion().CorrectOptionIndex)
            {
                return "btn-success";
            }
            else
            {
                return "btn-default";
            }
        }
        else
        {
            if (_session.OptionHasAlreadyBeenChoosen(option) == true)
            {
                return "btn-danger";
            }
            else
            {
                return "btn-turquois";
            }
        }
    }
    private async void MoveToNextQuestion()
    {
        Boolean isThereAnotherQuestion = _session.MoveToNextQuestion();
        if (isThereAnotherQuestion == true)
        {
            _currentAnswer = new AnswerViewModel();
            _showAnswers = false;

            await _countdown.Restart();
        }
        else
        {
            navManager.NavigateTo("/Results");
        }
    }

    private Int32 _activePlayerIndex = -1;

    private void KeyPressed(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" && _showAnswers == true)
        {
            MoveToNextQuestion();
            return;
        }

        if(_showAnswers == true) { return; }

        if (_activePlayerIndex >= 0)
        {
            Int32 indexPressed;
            if (Int32.TryParse(args.Key, out indexPressed) == true)
            {
                indexPressed -= 1;
                if (_nailJokerRequested == false)
                {
                    OptionSelected(indexPressed);
                }
                else
                {
                    if (_activePlayerIndex == indexPressed)
                    {
                        return;
                    }

                    _session.LinkNailerToNailee(_activePlayerIndex, indexPressed);
                    _activePlayerIndex = indexPressed;
                    _nailJokerRequested = false;
                    return;
                }
            }
            else
            {
                if (args.Key == "t" || args.Key == "r")
                {
                    TotalReliableWisdomJokerRequested();
                }
                else if (args.Key == "n")
                {
                    NailJokerRequested();
                }
            }

            return;
        }

        foreach (var item in GameSession.HotKeys)
        {
            if (item.Value == args.Key)
            {
                if (_session.PlayerHasAlreadyAnswerd(item.Key) == false)
                {
                    _activePlayerIndex = item.Key;
                    _countdown.Stop();
                }
            }
        }
    }

    private void OptionSelected(Int32 optionIndex)
    {
        if (_activePlayerIndex < 0)
        {
            return;
        }

        Boolean answerIsCorrect = _session.SubmitAnswer(optionIndex, _activePlayerIndex);
        if (answerIsCorrect == true)
        {
            _showAnswers = true;
            _countdown.Stop();
        }
        else
        {
            if (_session.AllPlayersHaveAnswered() == true)
            {
                _showAnswers = true;
                _countdown.Stop();
            }
            else
            {
                _countdown.Continue();
            }
        }

        _activePlayerIndex = -1;
    }

    private void TotalReliableWisdomJokerRequested()
    {
        if (_activePlayerIndex >= 0)
        {
            if (_session.PlayerHasUsedTotalReliableWisdomJoker(_activePlayerIndex) == false)
            {
                Int32 choosenOption = _session.GetAnswerFromTotalReliableWisdomJoker(_activePlayerIndex);
                OptionSelected(choosenOption);
            }
        }
    }

    private Boolean _nailJokerRequested = false;
    private void NailJokerRequested()
    {
        if (_activePlayerIndex >= 0)
        {
            if (_session.PlayerHasUsedNailJoker(_activePlayerIndex) == false)
            {
                _session.PlayerReqiuestedNailJoker(_activePlayerIndex);
                _nailJokerRequested = true;
            }
        }
    }

    private void CountdownFinished()
    {
        _showAnswers = true;
    }
}
